diff --git a/applications/drive/src/.htaccess b/applications/drive/src/.htaccess
index 5b522f3deb..5523b5a5dc 100644
--- a/applications/drive/src/.htaccess
+++ b/applications/drive/src/.htaccess
@@ -39,11 +39,13 @@ ErrorDocument 404 /assets/404.html
     Header set X-Robots-Tag "noindex"
 </Files>

+# <electron-mail-mark>
 # The download service worker gets chunk hash appended to the end of the filename
 <Files ~ "^downloadSW">
   Header set Service-Worker-Allowed "/"
   Header set Service-Worker "script"
 </Files>
+# </electron-mail-mark>

 <IfModule mod_mime.c>
   AddType application/font-woff2 .woff2

diff --git a/applications/drive/src/app/store/_downloads/fileSaver/download.ts b/applications/drive/src/app/store/_downloads/fileSaver/download.ts
index 66a9aba1cc..2a7ab63889 100644
--- a/applications/drive/src/app/store/_downloads/fileSaver/download.ts
+++ b/applications/drive/src/app/store/_downloads/fileSaver/download.ts
@@ -56,19 +56,26 @@ function serviceWorkerKeepAlive() {
     }, 10000);
 }

+/* <electron-mail-mark> */
 export async function initDownloadSW() {
     if (isUnsupported()) {
         throw new Error('Saving file via download is unsupported by this browser');
     }
-    await navigator.serviceWorker.register(
-        /* webpackChunkName: "downloadSW" */
-        new URL('./downloadSW', import.meta.url),
-        {
-            scope: `/${stripLeadingAndTrailingSlash(PUBLIC_PATH)}`,
-        }
-    );
+    try {
+        await navigator.serviceWorker.register(
+            /* webpackChunkName: "downloadSW" */
+            new URL('./downloadSW', import.meta.url),
+            {
+                scope: `/${stripLeadingAndTrailingSlash(PUBLIC_PATH)}`,
+            }
+        );
+    } catch (e) {
+        console.error(`Failed to register service worker.`, e.message);
+        throw e;
+    }
     serviceWorkerKeepAlive();
 }
+/* </electron-mail-mark> */

 /**
  * Opens download stream into service worker. Use abort signal when pipeTo can't close the download stream.

diff --git a/applications/drive/package.json b/applications/drive/package.json
index 1ff78a9928..d232854a68 100644
--- a/applications/drive/package.json
+++ b/applications/drive/package.json
@@ -5,7 +5,6 @@
     "author": "",
     "main": "index.ts",
     "scripts": {
-        "build": "cross-env NODE_ENV=production TS_NODE_PROJECT=\"../../tsconfig.webpack.json\" proton-pack build --appMode=sso",
         "check-types": "tsc",
         "i18n:getlatest": "proton-i18n upgrade",
         "i18n:upgrade": "proton-i18n extract --verbose && proton-i18n crowdin -u --verbose",

diff --git a/applications/drive/src/app/store/_downloads/fileSaver/download.ts b/applications/drive/src/app/store/_downloads/fileSaver/download.ts
index 7bef98525..0650e8019 100644
--- a/applications/drive/src/app/store/_downloads/fileSaver/download.ts
+++ b/applications/drive/src/app/store/_downloads/fileSaver/download.ts
@@ -11,8 +11,7 @@ import { TransferMeta } from '@proton/shared/lib/interfaces/drive/transfer';
  * IOS - forces all browsers to use webkit, so same problems as safari in all browsers.
  * For them download is done in-memory using blob response.
  */
-export const isUnsupported = () =>
-    !('serviceWorker' in navigator) || isSafari() || (isEdge() && !isEdgeChromium()) || isIos();
+export const isUnsupported = () => !('serviceWorker' in navigator);

 // createDownloadIframe opens download URL created in service worker to
 // initialize the download in the browser. The response has headers to

diff --git a/applications/drive/src/app/store/_shares/shareUrl.ts b/applications/drive/src/app/store/_shares/shareUrl.ts
index 76b907e2a1..a267a2d50c 100644
--- a/applications/drive/src/app/store/_shares/shareUrl.ts
+++ b/applications/drive/src/app/store/_shares/shareUrl.ts
@@ -36,6 +36,6 @@ export const getSharedLink = (sharedURL?: {

     const [generatedPassword] = splitGeneratedAndCustomPassword(sharedURL.password, sharedURL);

-    const url = sharedURL.publicUrl ? sharedURL.publicUrl : `${window.location.origin}/urls/${sharedURL.token}`;
+    const url = sharedURL.publicUrl ? sharedURL.publicUrl : `https://drive.protonmail.com/urls/${sharedURL.token}`;
     return `${url}${generatedPassword !== '' ? `#${generatedPassword}` : ''}`;
 };
