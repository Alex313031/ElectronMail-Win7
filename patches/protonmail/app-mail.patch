diff --git a/applications/mail/package.json b/applications/mail/package.json
index 8087743d3a..ce4cf05ff1 100644
--- a/applications/mail/package.json
+++ b/applications/mail/package.json
@@ -6,7 +6,6 @@
     "author": "",
     "main": "index.js",
     "scripts": {
-        "build": "cross-env NODE_ENV=production TS_NODE_PROJECT=\"../../tsconfig.webpack.json\" proton-pack build --appMode=sso",
         "check-types": "tsc",
         "i18n:getlatest": "proton-i18n upgrade",
         "i18n:upgrade": "proton-i18n extract --verbose && proton-i18n crowdin -u --verbose",

diff --git a/packages/shared/lib/api/events.ts b/packages/shared/lib/api/events.ts
index 519a50349..819bdb911 100644
--- a/packages/shared/lib/api/events.ts
+++ b/packages/shared/lib/api/events.ts
@@ -6,5 +6,9 @@ export const getLatestID = () => ({
 export const getEvents = (eventID: string, params?: { ConversationCounts: 1 | 0; MessageCounts: 1 | 0 }) => ({
     url: `core/v4/events/${eventID}`,
     method: 'get',
-    params,
+    params: {
+        ...params,
+        ConversationCounts: 1,
+        MessageCounts: 1
+    }
 });

diff --git a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
index bbb73f6bc9..584e9324be 100644
--- a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
+++ b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
@@ -470,6 +470,7 @@ const MailboxContainer = ({
                 tabIndex={-1}
                 className="flex-item-fluid flex flex-column flex-nowrap outline-none"
                 data-testid="mailbox"
+                electron-mail-mailbox-container-component
             >
                 <MailHeader
                     breakpoints={breakpoints}

diff --git a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
index c7d094d1b..3667af1eb 100644
--- a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
+++ b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
@@ -48,6 +48,7 @@ export const getRequest = ({ ID = '' }: Attachment = {}, api: Api, messageKeys:
     return api(getAttachment(ID));
 };

+/* <electron-mail-mark> */
 export const getDecryptedAttachment = async (
     attachment: Attachment,
     verification: MessageVerification | undefined,
@@ -82,6 +83,7 @@ export const getDecryptedAttachment = async (
         throw newError;
     }
 };
+/* </electron-mail-mark> */

 export const getAndVerify = async (
     attachment: Attachment = {},

diff --git a/applications/mail/src/app/helpers/message/messageDecrypt.ts b/applications/mail/src/app/helpers/message/messageDecrypt.ts
index acfa71607..216229b0f 100644
--- a/applications/mail/src/app/helpers/message/messageDecrypt.ts
+++ b/applications/mail/src/app/helpers/message/messageDecrypt.ts
@@ -26,6 +26,7 @@ const binaryToString = (data: Uint8Array) =>
         // nbsp can be contained in message body and "crash" DOMPurify
         .replace(/\u00A0/g, ' ');

+/* <electron-mail-mark> */
 export interface DecryptMessageResult {
     decryptedBody: string;
     decryptedRawContent: Uint8Array;
@@ -35,6 +36,7 @@ export interface DecryptMessageResult {
     errors?: MessageErrors;
     mimetype?: MIME_TYPES;
 }
+/* </electron-mail-mark> */

 const decryptMimeMessage = async (
     message: Message,
@@ -150,6 +152,7 @@ const decryptLegacyMessage = async (
  * Willingly not dealing with public keys and signature verification
  * It will be done separately when public keys will be ready
  */
+/* <electron-mail-mark> */
 export const decryptMessage = async (
     message: Message,
     privateKeys: PrivateKeyReference[],
@@ -162,6 +165,7 @@ export const decryptMessage = async (
     }
     return decryptLegacyMessage(message, privateKeys, password);
 };
+/* </electron-mail-mark> */

 /**
  * Verify the extracted `signature` of a decryption result against its `decryptedRawContent`

diff --git a/applications/mail/src/app/logic/messages/messagesTypes.ts b/applications/mail/src/app/logic/messages/messagesTypes.ts
index 29d48870ab..fc19436f55 100644
--- a/applications/mail/src/app/logic/messages/messagesTypes.ts
+++ b/applications/mail/src/app/logic/messages/messagesTypes.ts
@@ -49,20 +49,24 @@ export interface MessageVerification {
      */
     verificationErrors: Error[] | undefined;

+    /* <electron-mail-mark> */
     /**
      * Pinned public keys of the sender which can verify, if any
      */
     senderPinnedKeys: PublicKeyReference[] | undefined;
+    /* </electron-mail-mark> */

     /**
      * Sender public keys retrieved from API which can are not pinned
      */
     senderPinnableKeys: PublicKeyReference[] | undefined;

+    /* <electron-mail-mark> */
     /**
      * If the sender is in the list of contacts, whether its contact signature has been verified
      */
     pinnedKeysVerified: boolean | undefined;
+    /* </electron-mail-mark> */

     /**
      * If the message is signed, the public key that verifies the signature

diff --git a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
index 4c16c85b5..8b93c6084 100644
--- a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
+++ b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
@@ -10,7 +10,7 @@ export type UseGetMessageKeys = () => GetMessageKeys;
 /**
  * Add user public and private keys to the MessageExtended if not already there
  */
-export const useGetMessageKeys: UseGetMessageKeys = () => {
+export const useGetMessageKeys: UseGetMessageKeys = () => { /* <electron-mail-mark> */
     const getAddressKeys = useGetAddressKeys();

     return useCallback(
@@ -20,4 +20,4 @@ export const useGetMessageKeys: UseGetMessageKeys = () => {
         },
         [getAddressKeys]
     );
-};
+}; /* </electron-mail-mark> */

diff --git a/packages/components/hooks/useGetEncryptionPreferences.ts b/packages/components/hooks/useGetEncryptionPreferences.ts
index dae0d635c7..6308e24fa9 100644
--- a/packages/components/hooks/useGetEncryptionPreferences.ts
+++ b/packages/components/hooks/useGetEncryptionPreferences.ts
@@ -5,7 +5,7 @@ import { MINUTE, RECIPIENT_TYPES } from '@proton/shared/lib/constants';
 import { getSelfSendAddresses } from '@proton/shared/lib/helpers/address';
 import { canonicalizeEmail, canonicalizeInternalEmail } from '@proton/shared/lib/helpers/email';
 import { KT_VERIFICATION_STATUS } from '@proton/shared/lib/interfaces';
-import { GetEncryptionPreferences } from '@proton/shared/lib/interfaces/hooks/GetEncryptionPreferences';
+import { GetEncryptionPreferences } from '@proton/shared/lib/interfaces/hooks/GetEncryptionPreferences'; /* <electron-mail-mark/> TODO "GetEncryptionPreferences" is used as a method signature */
 import { getKeyHasFlagsToEncrypt } from '@proton/shared/lib/keys';
 import { getActiveKeys } from '@proton/shared/lib/keys/getActiveKeys';
 import { splitKeys } from '@proton/shared/lib/keys/keys';
@@ -31,7 +31,7 @@ const DEFAULT_LIFETIME = 5 * MINUTE;
  * Confluence document 'Encryption preferences for outgoing email'.
  * NB: the current logic does not handle internal address keys belonging to external accounts, since these keys are not used by Inbox.
  */
-const useGetEncryptionPreferences = () => {
+const useGetEncryptionPreferences = () => { /* <electron-mail-mark> TODO "GetEncryptionPreferences" is used as a method signature */
     const api = useApi();
     const cache = useCache();
     const getAddresses = useGetAddresses();
@@ -109,6 +109,6 @@ const useGetEncryptionPreferences = () => {
         },
         [cache, getEncryptionPreferences]
     );
-};
+}; /* <electron-mail-mark> */

 export default useGetEncryptionPreferences;

diff --git a/packages/shared/lib/interfaces/hooks/GetEncryptionPreferences.ts b/packages/shared/lib/interfaces/hooks/GetEncryptionPreferences.ts
index d31b0bf797..407bb22503 100644
--- a/packages/shared/lib/interfaces/hooks/GetEncryptionPreferences.ts
+++ b/packages/shared/lib/interfaces/hooks/GetEncryptionPreferences.ts
@@ -2,6 +2,7 @@ import { EncryptionPreferences } from '../../mail/encryptionPreferences';
 import { ContactEmail } from '../contacts';

 export type GetEncryptionPreferences = ({
+    /* <electron-mail-mark> TODO review signatures */
     email,
     intendedForEmail,
     lifetime,
@@ -15,4 +16,4 @@ export type GetEncryptionPreferences = ({
     intendedForEmail?: boolean;
     lifetime?: number;
     contactEmailsMap?: { [email: string]: ContactEmail | undefined };
-}) => Promise<EncryptionPreferences>;
+}) => Promise<EncryptionPreferences>;/* </electron-mail-mark> */

diff --git a/packages/components/hooks/useApi.ts b/packages/components/hooks/useApi.ts
index e2baface5..8b4317d5a 100644
--- a/packages/components/hooks/useApi.ts
+++ b/packages/components/hooks/useApi.ts
@@ -3,8 +3,8 @@ import { Api } from '@proton/shared/lib/interfaces';

 import ContextApi from '../containers/api/apiContext';

-const useApi = (): Api => {
+const useApi = (): Api => { /* <electron-mail-mark> */
     return useContext(ContextApi);
-};
+}; /* </electron-mail-mark> */

 export default useApi;

diff --git a/packages/components/hooks/useAuthentication.ts b/packages/components/hooks/useAuthentication.ts
index 2bab0ad85..51fc1fd18 100644
--- a/packages/components/hooks/useAuthentication.ts
+++ b/packages/components/hooks/useAuthentication.ts
@@ -3,9 +3,9 @@ import { useContext } from 'react';
 import { PrivateAuthenticationStore } from '../containers/app/interface';
 import AuthenticationContext from '../containers/authentication/authenticationContext';

-const useAuthentication = () => {
+const useAuthentication = () => { /* <electron-mail-mark> */
     // Force private authentication store because the public app is a special case
     return useContext(AuthenticationContext) as PrivateAuthenticationStore;
-};
+}; /* </electron-mail-mark> */

 export default useAuthentication;

diff --git a/packages/components/components/editor/rooster/hooks/useInitRooster.ts b/packages/components/components/editor/rooster/hooks/useInitRooster.ts
index dea411d80..caeec9fc5 100644
--- a/packages/components/components/editor/rooster/hooks/useInitRooster.ts
+++ b/packages/components/components/editor/rooster/hooks/useInitRooster.ts
@@ -42,7 +42,9 @@ const useInitRooster = ({

     const initRooster = useCallback(async () => {
         const iframe = iframeRef.current as HTMLIFrameElement;
+        /* <electron-mail-mark> */
         const iframeDocument = iframe.contentWindow?.document as Document;
+        /* </electron-mail-mark> */

         iframeDocument.open();
         iframeDocument.write(`
@@ -102,6 +104,13 @@ const useInitRooster = ({

         onReady(actions);

+        window.dispatchEvent(
+            new CustomEvent(
+                'electron-mail:packages/components/components/editor/rooster/hooks/useInitRooster.ts:useInitRooster:onReady',
+                { detail: { iframeDocument } },
+            ),
+        );
+
         return editor;
     }, []);

diff --git a/packages/components/hooks/useCache.ts b/packages/components/hooks/useCache.ts
index 35d7a0aba..352f1c8a3 100644
--- a/packages/components/hooks/useCache.ts
+++ b/packages/components/hooks/useCache.ts
@@ -3,7 +3,7 @@ import { useContext } from 'react';

 import Context from '../containers/cache/cacheContext';

-const useCache = <K = string, V = any>() => {
+const useCache = <K = string, V = any>() => { /* <electron-mail-mark> */
     const cache = useContext(Context);

     if (!cache) {
@@ -11,6 +11,6 @@ const useCache = <K = string, V = any>() => {
     }

     return cache as Cache<K, V>;
-};
+}; /* </electron-mail-mark> */

 export default useCache;

diff --git a/applications/mail/src/app/helpers/url.ts b/applications/mail/src/app/helpers/url.ts
index 2aaa779d3..487f54ff3 100644
--- a/applications/mail/src/app/helpers/url.ts
+++ b/applications/mail/src/app/helpers/url.ts
@@ -91,16 +91,5 @@ export const mailtoParser = (mailto: string): PartialMessageState => {
 };

 export const registerMailToProtocolHandler = () => {
-    if ('registerProtocolHandler' in navigator) {
-        try {
-            navigator.registerProtocolHandler(
-                'mailto',
-                `${window.location.origin}${MAILTO_PROTOCOL_HANDLER_PATH}`,
-                // @ts-expect-error third arg is still recommended (cf. https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler)
-                'ProtonMail'
-            );
-        } catch (e: any) {
-            console.error(e);
-        }
-    }
+    // NOOP
 };

diff --git a/applications/mail/src/app/components/drawer/MailQuickSettings.tsx b/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
index c0a72173cb..5baba25085 100644
--- a/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
+++ b/applications/mail/src/app/components/drawer/MailQuickSettings.tsx
@@ -31,7 +31,6 @@ import { useGetStartedChecklist } from 'proton-mail/containers/onboardingCheckli

 import { useEncryptedSearchContext } from '../../containers/EncryptedSearchProvider';
 import ClearBrowserDataModal from '../header/ClearBrowserDataModal';
-import MailDefaultHandlerModal from '../header/MailDefaultHandlerModal';

 interface QuickSettingsSelectOption {
     value: any;
@@ -328,7 +327,6 @@ const MailQuickSettings = () => {
                 )}
             </QuickSettingsButtonSection>

-            <MailDefaultHandlerModal {...mailDefaultHandlerProps} />
             <ClearBrowserDataModal {...clearBrowserDataProps} />
             <MailShortcutsModal {...mailShortcutsProps} />
             <KeyTransparencyDetailsModal {...keyTransparencyDetailsModalProps} />

diff --git a/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx b/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
deleted file mode 100644
index 0d29745777..0000000000
--- a/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
+++ /dev/null
@@ -1,41 +0,0 @@
-import { c } from 'ttag';
-
-import { Button, Href } from '@proton/atoms';
-import { ModalProps, Prompt } from '@proton/components';
-import { MAIL_APP_NAME } from '@proton/shared/lib/constants';
-import { getKnowledgeBaseUrl } from '@proton/shared/lib/helpers/url';
-
-import { registerMailToProtocolHandler } from '../../helpers/url';
-
-const MailDefaultHandlerModal = (props: ModalProps) => {
-    const { onClose } = props;
-
-    const handleAskForPermission = () => {
-        registerMailToProtocolHandler();
-
-        onClose?.();
-    };
-
-    return (
-        <Prompt
-            title={c('Info').t`Default email application`}
-            buttons={[
-                <Button color="norm" onClick={handleAskForPermission}>{c('Action').t`Set as default`}</Button>,
-                <Button onClick={onClose}>{c('Action').t`Cancel`}</Button>,
-            ]}
-            {...props}
-        >
-            <span>{c('Info')
-                .t`Set ${MAIL_APP_NAME} as your default email application for this browser. ${MAIL_APP_NAME} will open automatically when you click an email link.`}</span>
-            <Href
-                className="ml-2"
-                href={getKnowledgeBaseUrl('/set-default-email-handler')}
-                title="Default mail handler"
-            >
-                {c('Info').t`Learn more`}
-            </Href>
-        </Prompt>
-    );
-};
-
-export default MailDefaultHandlerModal;

diff --git a/applications/mail/src/app/components/header/search/MailSearch.tsx b/applications/mail/src/app/components/header/search/MailSearch.tsx
index 9b542628da..f26b6a9ccc 100644
--- a/applications/mail/src/app/components/header/search/MailSearch.tsx
+++ b/applications/mail/src/app/components/header/search/MailSearch.tsx
@@ -3,21 +3,17 @@ import { useEffect, useState } from 'react';
 import { Location } from 'history';

 import {
-    FeatureCode,
     TopNavbarListItemSearchButton,
     generateUID,
     useAddresses,
     useFolders,
     useLabels,
     usePopperAnchor,
-    useProgressiveRollout,
     useToggle,
-    useUser,
 } from '@proton/components';

 import { ADVANCED_SEARCH_OVERLAY_CLOSE_EVENT } from '../../../constants';
 import { useEncryptedSearchContext } from '../../../containers/EncryptedSearchProvider';
-import { isEncryptedSearchAvailable } from '../../../helpers/encryptedSearch/esUtils';
 import { extractSearchParameters } from '../../../helpers/mailboxUrl';
 import { useClickMailContent } from '../../../hooks/useClickMailContent';
 import { Breakpoints } from '../../../models/utils';
@@ -37,17 +33,15 @@ interface Props {

 const MailSearch = ({ breakpoints, labelID, location, columnMode }: Props) => {
     const [uid] = useState(generateUID('advanced-search-overlay'));
-    const isESUserInterfaceAvailable = useProgressiveRollout(FeatureCode.ESUserInterface);
     const { anchorRef, isOpen, open, close } = usePopperAnchor<HTMLInputElement>();
     const searchParams = extractSearchParameters(location);
     const [searchInputValue, setSearchInputValue] = useState(searchParams.keyword || '');
-    const [user] = useUser();
     const [, loadingLabels] = useLabels();
     const [, loadingFolders] = useFolders();
     const [, loadingAddresses] = useAddresses();
     const { esStatus, cacheIndexedDB, closeDropdown, esIndexingProgressState } = useEncryptedSearchContext();
     const { dropdownOpened } = esStatus;
-    const showEncryptedSearch = isEncryptedSearchAvailable(user, isESUserInterfaceAvailable);
+    const showEncryptedSearch = false;

     // Show more from inside AdvancedSearch to persist the state when the overlay is closed
     const { state: showMore, toggle: toggleShowMore } = useToggle(false);

diff --git a/packages/encrypted-search/lib/constants.ts b/packages/encrypted-search/lib/constants.ts
index ebdf5ee22..28adf6c62 100644
--- a/packages/encrypted-search/lib/constants.ts
+++ b/packages/encrypted-search/lib/constants.ts
@@ -131,7 +131,7 @@ export const defaultESStatus = {
     isEnablingContentSearch: false,
     isDBLimited: false,
     esEnabled: false,
-    esSupported: true,
+    esSupported: false,
     isRefreshing: false,
     isSearchPartial: false,
     isSearching: false,
