diff --git a/packages/components/containers/login/MinimalLoginContainer.tsx b/packages/components/containers/login/MinimalLoginContainer.tsx
index 6fef05c..1719cc8 100644
--- a/packages/components/containers/login/MinimalLoginContainer.tsx
+++ b/packages/components/containers/login/MinimalLoginContainer.tsx
@@ -25,6 +25,8 @@ import AbuseModal from './AbuseModal';
 import { AuthActionResponse, AuthCacheResult, AuthStep } from './interface';
 import { handleLogin, handleTotp, handleUnlock } from './loginActions';

+const ELECTRON_MAIL_FORM_STYLE = { padding: '0.8rem' } as const;
+
 const UnlockForm = ({
     onSubmit,
     cancelButton,
@@ -43,6 +45,7 @@ const UnlockForm = ({
                 withLoading(onSubmit(keyPassword)).catch(noop);
             }}
             method="post"
+            style={ELECTRON_MAIL_FORM_STYLE}
         >
             <Label htmlFor="password">{c('Label').t`Mailbox password`}</Label>
             <div className="mb1">
@@ -87,6 +90,7 @@ const TOTPForm = ({
                 withLoading(onSubmit(totp)).catch(noop);
             }}
             method="post"
+            style={ELECTRON_MAIL_FORM_STYLE}
         >
             <Label htmlFor="twoFa">{c('Label').t`Two-factor authentication code`}</Label>
             <div className="mb1">
@@ -165,6 +169,7 @@ const LoginForm = ({
                     withLoading(run()).catch(noop);
                 }}
                 method="post"
+                style={ELECTRON_MAIL_FORM_STYLE}
             >
                 {hasChallenge && (
                     <Challenge

diff --git a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
index 562696c4e..6531defba 100644
--- a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
+++ b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
@@ -247,6 +247,7 @@ const MailboxContainer = ({
                 tabIndex={-1}
                 className="flex-item-fluid flex flex-column flex-nowrap outline-none"
                 data-testid="mailbox"
+                electron-mail-mailbox-container-component
             >
                 {showToolbar && (
                     <ErrorBoundary small>

diff --git a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
index c7d094d1b..3667af1eb 100644
--- a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
+++ b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
@@ -48,6 +48,7 @@ export const getRequest = ({ ID = '' }: Attachment = {}, api: Api, messageKeys:
     return api(getAttachment(ID));
 };

+/* electron-mail mark */
 export const getDecryptedAttachment = async (
     attachment: Attachment,
     verification: MessageVerification | undefined,
@@ -82,6 +83,7 @@ export const getDecryptedAttachment = async (
         throw newError;
     }
 };
+/* electron-mail mark */

 export const getAndVerify = async (
     attachment: Attachment = {},

diff --git a/applications/mail/src/app/helpers/message/messageDecrypt.ts b/applications/mail/src/app/helpers/message/messageDecrypt.ts
index 375be1b51..a6bd8390e 100644
--- a/applications/mail/src/app/helpers/message/messageDecrypt.ts
+++ b/applications/mail/src/app/helpers/message/messageDecrypt.ts
@@ -47,6 +47,7 @@ const binaryToString = (data: Uint8Array) =>
         // nbsp can be contained in message body and "crash" DOMPurify
         .replace(/\u00A0/g, ' ');

+/* electron-mail mark */
 export interface DecryptMessageResult {
     decryptedBody: string;
     decryptedRawContent: Uint8Array;
@@ -56,6 +57,7 @@ export interface DecryptMessageResult {
     errors?: MessageErrors;
     mimetype?: MIME_TYPES;
 }
+/* electron-mail mark */

 const decryptMimeMessage = async (
     message: Message,
@@ -164,6 +166,7 @@ const decryptLegacyMessage = async (
  * Willingly not dealing with public keys and signature verification
  * It will be done separately when public keys will be ready
  */
+/* electron-mail mark */
 export const decryptMessage = async (
     message: Message,
     privateKeys: OpenPGPKey[],
@@ -176,6 +179,7 @@ export const decryptMessage = async (
     }
     return decryptLegacyMessage(message, privateKeys, password);
 };
+/* electron-mail mark */

 /**
  * Verify the extracted `signature` of a decryption result against its `decryptedRawContent`

diff --git a/applications/mail/src/app/logic/messages/messagesTypes.ts b/applications/mail/src/app/logic/messages/messagesTypes.ts
index 91dcf4e63..aa1a6a1cf 100644
--- a/applications/mail/src/app/logic/messages/messagesTypes.ts
+++ b/applications/mail/src/app/logic/messages/messagesTypes.ts
@@ -44,6 +44,8 @@ export interface MessageVerification {
      */
     verificationErrors: Error[] | undefined;

+    /* electron-mail mark */
+
     /**
      * Pinned public keys of the sender, if any
      */
@@ -54,6 +56,8 @@ export interface MessageVerification {
      */
     senderVerified: boolean | undefined;

+    /* electron-mail mark */
+
     /**
      * If the message is signed, the public key that verifies the signature
      */

diff --git a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
index 4c16c85b5..8b93c6084 100644
--- a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
+++ b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
@@ -10,7 +10,7 @@ export type UseGetMessageKeys = () => GetMessageKeys;
 /**
  * Add user public and private keys to the MessageExtended if not already there
  */
-export const useGetMessageKeys: UseGetMessageKeys = () => {
+export const useGetMessageKeys: UseGetMessageKeys = () => { /* electron-mail mark */
     const getAddressKeys = useGetAddressKeys();

     return useCallback(
@@ -20,4 +20,4 @@ export const useGetMessageKeys: UseGetMessageKeys = () => {
         },
         [getAddressKeys]
     );
-};
+}; /* electron-mail mark */

diff --git a/packages/components/hooks/useGetEncryptionPreferences.ts b/packages/components/hooks/useGetEncryptionPreferences.ts
index fe83b9e8c..b944a61e8 100644
--- a/packages/components/hooks/useGetEncryptionPreferences.ts
+++ b/packages/components/hooks/useGetEncryptionPreferences.ts
@@ -24,7 +24,7 @@ const DEFAULT_LIFETIME = 5 * MINUTE;
  * The logic for how those preferences are determined is laid out in the
  * Confluence document 'Encryption preferences for outgoing email'
  */
-const useGetEncryptionPreferences = () => {
+const useGetEncryptionPreferences = () => { /* electron-mail mark */
     const api = useApi();
     const cache = useCache();
     const getAddresses = useGetAddresses();
@@ -87,6 +87,6 @@ const useGetEncryptionPreferences = () => {
         },
         [cache, getEncryptionPreferences]
     );
-};
+}; /* electron-mail mark */

 export default useGetEncryptionPreferences;

diff --git a/packages/components/hooks/useApi.ts b/packages/components/hooks/useApi.ts
index e2baface5..8b4317d5a 100644
--- a/packages/components/hooks/useApi.ts
+++ b/packages/components/hooks/useApi.ts
@@ -3,8 +3,8 @@ import { Api } from '@proton/shared/lib/interfaces';

 import ContextApi from '../containers/api/apiContext';

-const useApi = (): Api => {
+const useApi = (): Api => { /* electron-mail mark */
     return useContext(ContextApi);
-};
+}; /* electron-mail mark */

 export default useApi;

diff --git a/packages/components/hooks/useAuthentication.ts b/packages/components/hooks/useAuthentication.ts
index feb92a8af..d802ae8ae 100644
--- a/packages/components/hooks/useAuthentication.ts
+++ b/packages/components/hooks/useAuthentication.ts
@@ -3,9 +3,9 @@ import { useContext } from 'react';
 import AuthenticationContext from '../containers/authentication/authenticationContext';
 import { PrivateAuthenticationStore } from '../containers/app/interface';

-const useAuthentication = () => {
+const useAuthentication = () => { /* electron-mail mark */
     // Force private authentication store because the public app is a special case
     return useContext(AuthenticationContext) as PrivateAuthenticationStore;
-};
+}; /* electron-mail mark */

 export default useAuthentication;

diff --git a/packages/components/components/editor/rooster/hooks/useInitRooster.ts b/packages/components/components/editor/rooster/hooks/useInitRooster.ts
index dea411d80..caeec9fc5 100644
--- a/packages/components/components/editor/rooster/hooks/useInitRooster.ts
+++ b/packages/components/components/editor/rooster/hooks/useInitRooster.ts
@@ -42,7 +42,9 @@ const useInitRooster = ({
 
     const initRooster = useCallback(async () => {
         const iframe = iframeRef.current as HTMLIFrameElement;
+        /* electron-mail mark */
         const iframeDocument = iframe.contentWindow?.document as Document;
+        /* electron-mail mark */
 
         iframeDocument.open();
         iframeDocument.write(`
@@ -102,6 +104,13 @@ const useInitRooster = ({
 
         onReady(actions);
 
+        window.dispatchEvent(
+            new CustomEvent(
+                'electron-mail:packages/components/components/editor/rooster/hooks/useInitRooster.ts:useInitRooster:onReady',
+                { detail: { iframeDocument } },
+            ),
+        );
+
         return editor;
     }, []);
 
diff --git a/packages/components/hooks/useCache.ts b/packages/components/hooks/useCache.ts
index 35d7a0aba..352f1c8a3 100644
--- a/packages/components/hooks/useCache.ts
+++ b/packages/components/hooks/useCache.ts
@@ -3,7 +3,7 @@ import { useContext } from 'react';

 import Context from '../containers/cache/cacheContext';

-const useCache = <K = string, V = any>() => {
+const useCache = <K = string, V = any>() => { /* electron-mail mark */
     const cache = useContext(Context);

     if (!cache) {
@@ -11,6 +11,6 @@ const useCache = <K = string, V = any>() => {
     }

     return cache as Cache<K, V>;
-};
+}; /* electron-mail mark */

 export default useCache;

diff --git a/applications/mail/src/app/App.tsx b/applications/mail/src/app/App.tsx
index 50ae8f9a3..c79b724ee 100644
--- a/applications/mail/src/app/App.tsx
+++ b/applications/mail/src/app/App.tsx
@@ -22,11 +22,6 @@ newVersionUpdater(config);
 sentry({ config, uid: authentication.getUID(), sessionTracking: getSessionTrackingEnabled() });
 setVcalProdId(getProdId(config));
 
-// If the browser is Chromium based, register automatically the mailto protocol handler
-if ('chrome' in window) {
-    registerMailToProtocolHandler();
-}
-
 const App = () => {
     const [hasInitialAuth] = useState(() => {
         return !window.location.pathname.startsWith(G_OAUTH_REDIRECT_PATH);

diff --git a/applications/mail/src/app/EOApp.tsx b/applications/mail/src/app/EOApp.tsx
index fa8ab5f17..2c5bd2d2c 100644
--- a/applications/mail/src/app/EOApp.tsx
+++ b/applications/mail/src/app/EOApp.tsx
@@ -36,11 +36,6 @@ newVersionUpdater(config);
 sentry({ config, sessionTracking: getSessionTrackingEnabled() });
 setVcalProdId(getProdId(config));
 
-// If the browser is Chromium based, register automatically the mailto protocol handler
-if ('chrome' in window) {
-    registerMailToProtocolHandler();
-}
-
 const App = () => {
     const cacheRef = useRef<Cache<string, any>>();
     if (!cacheRef.current) {

diff --git a/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx b/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
index bdabb99e0..a56b8cdcb 100644
--- a/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
+++ b/applications/mail/src/app/components/header/MailDefaultHandlerModal.tsx
@@ -4,13 +4,10 @@ import { Href } from '@proton/components/components/link';
 import { MAIL_APP_NAME } from '@proton/shared/lib/constants';
 import { getKnowledgeBaseUrl } from '@proton/shared/lib/helpers/url';
 
-import { registerMailToProtocolHandler } from '../../helpers/url';
-
 const MailDefaultHandlerModal = (props: ModalProps) => {
     const { onClose } = props;
 
     const handleAskForPermission = () => {
-        registerMailToProtocolHandler();
 
         onClose?.();
     };

diff --git a/applications/mail/src/app/components/header/MailHeader.tsx b/applications/mail/src/app/components/header/MailHeader.tsx
index 246b88729..71dd17426 100644
--- a/applications/mail/src/app/components/header/MailHeader.tsx
+++ b/applications/mail/src/app/components/header/MailHeader.tsx
@@ -35,7 +35,6 @@ import { getLabelName } from '../../helpers/labels';
 import { useEncryptedSearchContext } from '../../containers/EncryptedSearchProvider';
 import { useOnCompose, useOnMailTo } from '../../containers/ComposeProvider';
 import { MESSAGE_ACTIONS } from '../../constants';
-import MailDefaultHandlerModal from './MailDefaultHandlerModal';
 import ClearBrowserDataModal from './ClearBrowserDataModal';
 import MailSearch from './search/MailSearch';
 import MailOnboardingModal from '../onboarding/MailOnboardingModal';
@@ -192,7 +191,6 @@ const MailHeader = ({ labelID, elementID, breakpoints, expanded, onToggleExpand
             <MailViewLayoutModal {...mailViewLayoutProps} />
             <MailDensityModal {...mailDensityProps} />
             <MailComposerModeModal {...mailComposerModeProps} />
-            <MailDefaultHandlerModal {...mailDefaultHandlerProps} />
             <ClearBrowserDataModal {...clearBrowserDataProps} />
             <FeedbackModal
                 {...feedbackModalProps}

diff --git a/applications/mail/src/app/helpers/url.ts b/applications/mail/src/app/helpers/url.ts
index 2aaa779d3..487f54ff3 100644
--- a/applications/mail/src/app/helpers/url.ts
+++ b/applications/mail/src/app/helpers/url.ts
@@ -91,16 +91,5 @@ export const mailtoParser = (mailto: string): PartialMessageState => {
 };
 
 export const registerMailToProtocolHandler = () => {
-    if ('registerProtocolHandler' in navigator) {
-        try {
-            navigator.registerProtocolHandler(
-                'mailto',
-                `${window.location.origin}${MAILTO_PROTOCOL_HANDLER_PATH}`,
-                // @ts-expect-error third arg is still recommended (cf. https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler)
-                'ProtonMail'
-            );
-        } catch (e: any) {
-            console.error(e);
-        }
-    }
+    // NOOP
 };

diff --git a/applications/mail/src/app/components/header/search/MailSearch.tsx b/applications/mail/src/app/components/header/search/MailSearch.tsx
index 8afef84c8..b1874420a 100644
--- a/applications/mail/src/app/components/header/search/MailSearch.tsx
+++ b/applications/mail/src/app/components/header/search/MailSearch.tsx
@@ -56,7 +56,7 @@ const MailSearch = ({ breakpoints }: Props) => {
     const { isDBLimited, dropdownOpened } = getESDBStatus();
     const esState = useEncryptedSearchToggleState(isOpen);
 
-    const showEncryptedSearch = !isMobile() && !!esFeature && !!esFeature.Value && !!isPaid(user);
+    const showEncryptedSearch = false;
 
     // Show more from inside AdvancedSearch to persist the state when the overlay is closed
     const { state: showMore, toggle: toggleShowMore } = useToggle(false);

diff --git a/packages/encrypted-search/lib/constants.ts b/packages/encrypted-search/lib/constants.ts
index 1b28a2765..ee7c59df8 100644
--- a/packages/encrypted-search/lib/constants.ts
+++ b/packages/encrypted-search/lib/constants.ts
@@ -67,7 +67,7 @@ export const defaultESStatus = {
     isBuilding: false,
     isDBLimited: false,
     esEnabled: false,
-    esSupported: true,
+    esSupported: false,
     isRefreshing: false,
     isSearchPartial: false,
     isSearching: false,

diff --git a/packages/encrypted-search/lib/esUtils.ts b/packages/encrypted-search/lib/esUtils.ts
index 4f8928ead..ea00c2542 100644
--- a/packages/encrypted-search/lib/esUtils.ts
+++ b/packages/encrypted-search/lib/esUtils.ts
@@ -227,13 +227,7 @@ export const updateSizeIDB = (userID: string, addend: number) => {
  * but also because IDB is not corrupt, i.e. the object store exists
  */
 export const canUseES = async (userID: string, storeName: string) => {
-    if (!indexKeyExists(userID)) {
-        return false;
-    }
-    const esDB = await openESDB(userID);
-    const isIntact = esDB.objectStoreNames.contains(storeName);
-    esDB.close();
-    return isIntact;
+    return false;
 };
 
 /**
